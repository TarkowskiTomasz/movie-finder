{"version":3,"sources":["components/Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","title","poster_path","overview","vote_average","IMG_API","console","log","vote","className","src","alt","API_KEY","FEATURED_API","SEARCH_API","App","useState","movies","setMovies","searchValue","setSearchValue","forAdults","setForAdults","getMovies","API","a","axios","get","request","data","results","fetchData","useEffect","onSubmit","e","preventDefault","type","placeholder","onChange","target","value","for","id","name","length","map","movie","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mSAkCeA,G,MAhCD,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,YAAaC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,aAEpCC,EAAU,mCAChBC,QAAQC,IAAIF,EAAUH,GAEtB,IAAgBM,EAMhB,OACI,yBAAKC,UAAU,SACX,yBAAKC,IAAML,EAAUH,EAAcS,IAAKV,IACxC,yBAAKQ,UAAU,cACX,4BAAKR,GACL,0BAAMQ,WAXFD,EAWqBJ,EAV9BI,GAAO,EAAU,QACZA,GAAQ,EAAU,SACd,QAQqCJ,GACzC,yBAAKK,UAAU,QACX,yCACA,2BAAIN,QCblBS,EAAU,mCACVC,EAAY,qFAAiFD,GAE7FE,EAAU,6DAAyDF,EAAzD,WAuFDG,MArFf,WAAgB,IAAD,EAEiBC,mBAAS,IAF1B,mBAEJC,EAFI,KAEIC,EAFJ,OAG2BF,qBAH3B,mBAGJG,EAHI,KAGSC,EAHT,OAIuBJ,oBAAS,GAJhC,mBAIJK,EAJI,KAIOC,EAJP,KAOLC,EAAW,SAACC,GAAO,4CACvB,4BAAAC,EAAA,sEACwBC,IAAMC,IAAIH,GADlC,cACQI,EADR,OAEEtB,QAAQC,IAAIqB,EAAQC,KAAKC,SACzBZ,EAAUU,EAAQC,KAAKC,SAHzB,kBAISF,GAJT,4CADuB,uBAAC,WAAD,wBAQvBG,IA6CJ,OA1CAC,qBAAU,WAERT,EAAUV,KAET,IAuCD,6BACA,gCACA,0BAAMoB,SAtCe,SAACC,GACtBA,EAAEC,iBAEChB,IAEFI,EAAUT,EAAaK,GAItBC,EAAe,OA8Bf,6BACA,2BAAOX,UAAU,SAAS2B,KAAK,OAAOC,YAAY,SAASC,SAxBxC,SAACJ,GACtBd,EAAec,EAAEK,OAAOC,QAuB+DA,MAAOrB,KAE5F,yBAAKV,UAAU,kBACb,6BACA,2BAAOgC,IAAI,UAAX,WAAmC,6BACrC,2BAAOH,SAvBU,SAACJ,GAAK,4CAEzB,4BAAAT,EAAA,sEACwBC,IAAMC,IAAIb,EAAaK,EAAc,kBAA3B,UAAkDE,IADpF,cACQO,EADR,OAEEtB,QAAQC,IAAIqB,EAAQC,KAAKC,SACzBZ,EAAUU,EAAQC,KAAKC,SAHzB,kBAISF,GAJT,4CAFyB,sBACzBN,GAAcD,GADW,mCASzBU,IAciCK,KAAK,WAAWM,GAAG,SAASC,KAAK,SAASH,MAAM,YAMjF,yBAAK/B,UAAU,mBACZH,QAAQC,IAAIU,GACZA,EAAO2B,OAAS,GACjB3B,EAAO4B,KAAI,SAACC,GAAD,OAAU,kBAAC,EAAD,eAAOC,IAAKD,EAAMJ,IAAQI,UChFjCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3D,QAAQ2D,MAAMA,EAAMC,c","file":"static/js/main.2a3a6533.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Movie = ({title, poster_path, overview, vote_average}) => {\r\n\r\n    const IMG_API = 'https://image.tmdb.org/t/p/w1280';\r\n    console.log(IMG_API + poster_path)\r\n\r\n    const setVote= (vote)=>{\r\n        if(vote>= 8) return 'green'\r\n        else if(vote >= 6) return 'orange'\r\n        else return 'red';\r\n    }\r\n\r\n    return (\r\n        <div className='movie'>\r\n            <img src= {IMG_API + poster_path } alt={title} /> \r\n            <div className=\"movie-info\">\r\n                <h3>{title}</h3>\r\n                <span className={setVote(vote_average)}>{vote_average}</span>\r\n                <div className=\"info\">\r\n                    <h2>Overview:</h2>\r\n                    <p>{overview}</p>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n\r\n    )\r\n\r\n    \r\n\r\n} \r\n\r\n\r\nexport default Movie;","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nimport Movie from './components/Movie';\n\n\n\nconst API_KEY = 'ee8b648ac04179ef14616f3b26f6499e';\nconst FEATURED_API = `https://api.themoviedb.org/3/discover/movie?sort_by=popilarity.asc&api_key=${API_KEY}`\nconst IMG_API = 'https://image.tmdb.org/t/p/w1280';\nconst SEARCH_API = `https://api.themoviedb.org/3/search/movie?&api_key=${API_KEY}&query=`;\n\nfunction App() {\n\n    const [movies, setMovies] = useState([]);\n    const [searchValue, setSearchValue] = useState();\n    const [forAdults, setForAdults] = useState(false);\n    \n\n    const getMovies =(API) =>{\n      async function fetchData(){\n        const request = await axios.get(API)\n        console.log(request.data.results);\n        setMovies(request.data.results);\n        return request\n      }\n\n      fetchData();\n    }\n\n  useEffect(()=>{\n\n    getMovies(FEATURED_API);\n  \n  }, [])\n\n\n  const handleOnSubmit = (e) =>{\n    e.preventDefault();\n\n    if(searchValue){\n\n     getMovies(SEARCH_API + searchValue)\n       \n    \n  \n      setSearchValue('');\n\n    }\n\n\n  }\n\n  const handleOnChange = (e) =>{\n    setSearchValue(e.target.value);\n\n  }\n\n\n  const adultHandler = (e) =>{\n    setForAdults(!forAdults)\n    async function fetchData(){\n      const request = await axios.get(SEARCH_API + searchValue + '&include_adult=' + `${forAdults}` )\n      console.log(request.data.results);\n      setMovies(request.data.results);\n      return request\n    }\n     \n    fetchData();\n  }\n\n\n  return (\n    <div>\n    <header>\n    <form onSubmit={handleOnSubmit}>\n      <div>\n      <input className=\"search\" type=\"text\" placeholder=\"Search\" onChange={handleOnChange} value={searchValue}/>\n        </div>\n      <div className='search-options'>\n        <div>\n        <label for=\"adults\"> Adults</label><br></br>\n      <input onChange={adultHandler} type=\"checkbox\" id=\"adults\" name=\"adults\" value=\"Yes\"/> \n        </div>\n       \n      </div>\n      </form>\n      </header>\n    <div className=\"movie-container\">\n      {console.log(movies)}\n      {movies.length > 0  && \n      movies.map((movie)=> <Movie key={movie.id} {...movie} />)}\n   </div>\n   </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}